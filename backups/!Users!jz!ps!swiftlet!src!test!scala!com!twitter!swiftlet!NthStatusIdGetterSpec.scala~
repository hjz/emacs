package com.twitter.swiftlet

import com.twitter.http.Response
import com.twitter.util.{Duration, Future, Promise, Throw, Time}
import com.twitter.conversions.time._
import org.specs.mock.Mockito
import org.specs.Specification

class TimelineCheckerSpec extends Specification with Mockito {
  val host = mock[HostFactory]
  val swiftlet = mock[Swiftlet]
  val executor = mock[SwiftletExecutor]
  doReturn(executor).when(swiftlet).executor
  val cred = OAuthCredentials(1, "blorg1", "foo", "bar", "baz", "xxx")
  val statusId = 1L
  val callback = mock[Quiz.Callback]
  val config = new TimeoutConfig {
    override val pollInterval = 5.milliseconds
    override val timeout = 1.second
  }

  val checker = TimelineChecker(host, swiftlet, cred, statusId, callback, config)

  "TimelineChecker" should {
    "taskName" in {
      checker.taskName mustEqual "TimelineChecker-@%s-%d".format(cred.screenName, statusId)
    }

    "fail on timeout" in Time.withTimeAt(Time.now) { tc =>
      tc.advance(5.seconds)
      checker.run()
      there was one(callback).fail(any[TimeoutException])
      there were no(callback).apply()
      there were no(executor).apply(any[TimelineChecker], any[Duration])
    }

    "fail on throw" in {
      val t = new RuntimeException
      val future = new Promise[Response] {
        update(Throw(t))
      }
      doReturn(future).when(swiftlet).getResponse(ApiRequest.HomeTimeline(cred, host))

      checker.run()
      there was one(callback).fail(t)
      there were no(callback).apply()
      there were no(executor).apply(any[TimelineChecker], any[Duration])
    }

    "reschedule if no statusId" in {
      val response = mock[Response]
      doReturn(Future(response)).when(swiftlet).getResponse(ApiRequest.HomeTimeline(cred, host))
      doReturn(false).when(swiftlet).timelineHasStatusId(response, statusId)
      checker.run()
      there was one(executor).apply(checker, config.pollInterval)
      there were no(callback).apply()
      there were no(callback).fail(any[Throwable])
    }

    "call succeed if statusId" in {
      val response = mock[Response]
      doReturn(Future(response)).when(swiftlet).getResponse(ApiRequest.HomeTimeline(cred, host))
      doReturn(true).when(swiftlet).timelineHasStatusId(response, statusId)
      checker.run()
      there was one(callback).apply()
      there were no(callback).fail(any[Throwable])
      there were no(executor).apply(any[TimelineChecker], any[Duration])
    }
  }
}
